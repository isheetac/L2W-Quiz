{"version":3,"sources":["redux/reducer/reducer.js","redux/store/index.js","components/Button.js","components/Score.js","components/Timer.js","components/Card.js","api/getQuizApi.js","components/App.js","container/AppContainer.js","redux/actions/actions.js","index.js"],"names":["initialState","quizData","selectCategory","correctAnswers","currentQuestion","store","createStore","state","action","type","Button","onClick","children","id","className","Score","refresh","score","Timer","props","seconds","this","duration","timeoutFn","setState","prevState","interval","setInterval","tick","clearInterval","timeLeft","style","color","React","Component","Card","question","wrongAnswers","correctAnswer","checkAnswerFn","answers","concat","sort","map","answer","i","key","checkResponse","response","status","console","log","json","quizType","title","App","showCard","record","index","correct_answer","incorrect_answers","checkAnswer","atob","x","bind","restartQuiz","sessionToken","fetch","then","catch","err","Error","session","token","categoryId","setQuiz","setCategory","getQuizApi","results","resetQuiz","countCorrect","updateCurrent","item","fetchCategory","AppContainer","connect","dispatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df0535b2.chunk.js","sourcesContent":["import {\r\n  setQuiz,\r\n  setCategory,\r\n  countCorrect,\r\n  updateCurrent,\r\n  resetQuiz,\r\n} from \"../actions/actions\";\r\n\r\nexport const initialState = {\r\n  quizData: null,\r\n  selectCategory: false,\r\n  correctAnswers: 0,\r\n  currentQuestion: 0,\r\n};\r\n\r\n//Reducer\r\nexport const updateState = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_QUIZ\":\r\n      return {\r\n        ...state,\r\n        quizData: action.quizData,\r\n      };\r\n    case \"SET_CATEGORY\":\r\n      return {\r\n        ...state,\r\n        selectCategory: true,\r\n      };\r\n    case \"COUNT_CORRECT\":\r\n      return {\r\n        ...state,\r\n        correctAnswers: state.correctAnswers + 1,\r\n      };\r\n    case \"UPDATE_CURRENT\":\r\n      return {\r\n        ...state,\r\n        currentQuestion: state.currentQuestion + 1,\r\n      };\r\n    case \"RESET_QUIZ\":\r\n      return {\r\n        initialState,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { updateState } from \"../reducer/reducer\";\r\n\r\nexport const store = createStore(updateState);\r\n","import React from \"react\";\r\n\r\nconst Button = ({ onClick, children, id }) => {\r\n  return (\r\n    <button className=\"button\" onClick={onClick} id={id}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst Score = ({ refresh, score }) => {\r\n  return (\r\n    <article className=\"scoreCard\">\r\n      <h1>Your Score</h1>\r\n      <p>{score}</p>\r\n      <Button onClick={refresh}>Take Quiz Again</Button>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      seconds: 0,\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    const { duration, timeoutFn } = this.props;\r\n    if (this.state.seconds === duration) {\r\n      timeoutFn();\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        seconds: prevState.seconds + 1,\r\n      }));\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { duration } = this.props;\r\n    let timeLeft = duration - this.state.seconds;\r\n    return <span style={{ color: \"red\" }}>Time Left: {timeLeft}</span>;\r\n  }\r\n}\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport Button from \"./Button\";\r\nclass Card extends React.Component {\r\n  render() {\r\n    const {\r\n      question,\r\n      duration,\r\n      wrongAnswers,\r\n      correctAnswer,\r\n      checkAnswerFn,\r\n    } = this.props;\r\n    const answers = [correctAnswer].concat(wrongAnswers).sort();\r\n    return (\r\n      <article className=\"card\">\r\n        <header>\r\n          <Timer duration={duration} timeoutFn={checkAnswerFn(true, false)} />\r\n        </header>\r\n        <div>\r\n          <p>{question}</p>\r\n        </div>\r\n        <footer>\r\n          {answers.map((answer, i) => {\r\n            return (\r\n              <Button key={i} onClick={checkAnswerFn(answer, correctAnswer)}>\r\n                {answer}\r\n              </Button>\r\n            );\r\n          })}\r\n        </footer>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","//Check Response Status of API\r\nconst checkResponse = (response) => {\r\n  if (response.status !== 200) {\r\n    console.log(`Error with request ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n//Get Session Token of API\r\nexport const getSession = () => {\r\n  return fetch(`https://opentdb.com/api_token.php?command=request`)\r\n    .then(checkResponse)\r\n    .catch((err) => {\r\n      throw new Error(`Fetching session token failed ${err}`);\r\n    });\r\n};\r\n\r\n//Get API\r\nexport const getQuizApi = (categoryId, sessionToken) => {\r\n  return fetch(\r\n    `https://opentdb.com/api.php?amount=10&category=${categoryId}&type=multiple&encode=base64&token=${sessionToken}`\r\n  )\r\n    .then(checkResponse)\r\n    .catch((err) => {\r\n      throw new Error(`Fetching quiz failed ${err}`);\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport Score from \"./Score\";\r\nimport Card from \"./Card\";\r\nimport { getQuizApi, getSession } from \"../api/getQuizApi\";\r\n\r\nconst quizType = [\r\n  { id: 18, title: \"Science: Computers\" },\r\n  { id: 30, title: \"Science: Gadgets\" },\r\n  { id: 19, title: \"Science: Mathematics\" },\r\n];\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.checkAnswer = this.checkAnswer.bind(this);\r\n    this.restartQuiz = this.restartQuiz.bind(this);\r\n    this.sessionToken = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    getSession().then((session) => {\r\n      this.sessionToken = session.token;\r\n    });\r\n  }\r\n\r\n  fetchCategory(categoryId) {\r\n    return () => {\r\n      const { setQuiz, setCategory } = this.props;\r\n      getQuizApi(categoryId, this.sessionToken)\r\n        .then((quizData) => setQuiz(quizData.results))\r\n        .then(() => setCategory());\r\n    };\r\n  }\r\n\r\n  restartQuiz() {\r\n    const { resetQuiz } = this.props;\r\n    resetQuiz();\r\n  }\r\n\r\n  checkAnswer(answer, correctAnswer) {\r\n    const { countCorrect, updateCurrent, currentQuestion } = this.props;\r\n    return () => {\r\n      if (answer === correctAnswer) {\r\n        countCorrect();\r\n      }\r\n      updateCurrent(currentQuestion);\r\n    };\r\n  }\r\n\r\n  showCard = (record, index) => {\r\n    const { correct_answer, incorrect_answers, question } = record;\r\n    return (\r\n      <Card\r\n        key={index}\r\n        checkAnswerFn={this.checkAnswer}\r\n        question={atob(question)}\r\n        duration={10}\r\n        correctAnswer={atob(correct_answer)}\r\n        wrongAnswers={incorrect_answers.map((x) => atob(x))}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      quizData,\r\n      selectCategory,\r\n      correctAnswers,\r\n      currentQuestion,\r\n    } = this.props;\r\n    return (\r\n      <div className=\"app\">\r\n        {!selectCategory && <h1>Pick a Category</h1>}\r\n        {!selectCategory &&\r\n          quizType.map((item, i) => {\r\n            return (\r\n              <Button\r\n                key={i}\r\n                onClick={this.fetchCategory(item.id)}\r\n                id={item.id}\r\n              >\r\n                {item.title}\r\n              </Button>\r\n            );\r\n          })}\r\n        {quizData && currentQuestion < 10\r\n          ? this.showCard(quizData[currentQuestion], currentQuestion)\r\n          : \"\"}\r\n        {quizData && currentQuestion === 10 ? (\r\n          <Score score={correctAnswers} refresh={this.restartQuiz} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport App from \"../components/App\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setQuiz,\r\n  setCategory,\r\n  resetQuiz,\r\n  countCorrect,\r\n  updateCurrent,\r\n  currentQuestion,\r\n} from \"../redux/actions/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    quizData: state.quizData,\r\n    selectCategory: state.selectCategory,\r\n    currentQuestion: state.currentQuestion,\r\n    correctAnswers: state.correctAnswers,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setQuiz: (quizData) => dispatch(setQuiz(quizData)),\r\n    setCategory: () => dispatch(setCategory()),\r\n    resetQuiz: () => dispatch(resetQuiz()),\r\n    countCorrect: () => dispatch(countCorrect()),\r\n    updateCurrent: (currentQuestion) =>\r\n      dispatch(updateCurrent(currentQuestion)),\r\n  };\r\n};\r\n\r\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default AppContainer;\r\n","export const setQuiz = (data) => {\r\n  return {\r\n    type: \"SET_QUIZ\",\r\n    quizData: data,\r\n  };\r\n};\r\n\r\nexport const countCorrect = () => {\r\n  return {\r\n    type: \"COUNT_CORRECT\",\r\n  };\r\n};\r\n\r\nexport const updateCurrent = (currentQuestion) => {\r\n  return {\r\n    type: \"UPDATE_CURRENT\",\r\n    currentQuestion,\r\n  };\r\n};\r\n\r\nexport const setCategory = () => {\r\n  return {\r\n    type: \"SET_CATEGORY\",\r\n  };\r\n};\r\n\r\nexport const resetQuiz = () => {\r\n  return {\r\n    type: \"RESET_QUIZ\",\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../src/styles.css\";\r\nimport { store } from \"./redux/store/index\";\r\nimport AppContainer from \"./container/AppContainer\";\r\n\r\nReactDOM.render(\r\n  <AppContainer store={store} />,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}